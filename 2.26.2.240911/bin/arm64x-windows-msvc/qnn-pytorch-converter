#!/usr/bin/env python3
# # -*- mode: python -*-
# ==============================================================================
#
#  Copyright (c) Qualcomm Technologies, Inc.
#  All Rights Reserved.
#  Confidential and Proprietary - Qualcomm Technologies, Inc.
# ==============================================================================

import sys
import traceback
import torch

try:
    import qti.aisw
except ImportError as ie1:
    print("Failed to find necessary python package")
    print(str(ie1))
    print("Please ensure that $SNPE_ROOT/lib/python is in your PYTHONPATH")
    sys.exit(1)

# Common Imports
from qti.aisw.converters.common.utils.converter_utils import log_error, log_warning
from qti.aisw.converters.common.converter_ir.op_graph_optimizations import IROptimizations
from qti.aisw.converters.common.utils.argparser_util import ArgParserWrapper, CustomHelpFormatter
from qti.aisw.converters.common.arch_linter.arch_linter import ArchLinter

# Pytorch Converter
from qti.aisw.converters.pytorch.pytorch_to_ir import PyTorchConverterFrontend

# Backend Imports
from qti.aisw.converters.backend.ir_to_qnn import QnnConverterBackend
from qti.aisw.converters.backend.qnn_quantizer import QnnQuantizer
from qti.aisw.converters.relay.custom_ops.utils.pytorch_helpers import PytorchCustomOpFactory


class PyTorchToDLCArgParser(ArgParserWrapper):
    def __init__(self):
        super(PyTorchToDLCArgParser, self).__init__(formatter_class=CustomHelpFormatter,
                                                    conflict_handler='resolve',
                                                    parents=[PyTorchConverterFrontend.ArgParser(),
                                                             IROptimizations.ArgParser(),
                                                             QnnQuantizer.ArgParser(),
                                                             QnnConverterBackend.ArgParser(),
                                                             ArchLinter.ArgParser()
                                                            ])
        self.parser.description = 'Script to convert PyTorch model into QNN'

def main():
    try:
        parser = PyTorchToDLCArgParser()
        args = parser.parse_args()

        converter = PyTorchConverterFrontend(args, custom_op_factory=PytorchCustomOpFactory())
        ir_graph = converter.convert()

        # Override optimizer flags for QNN backend
        args.perform_axes_to_spatial_first_order = True
        args.squash_box_decoder = True
        args.match_caffe_ssd_to_tf = True
        args.adjust_nms_features_dims = True
        args.extract_color_transform = True
        args.preprocess_roi_pool_inputs = True
        args.inject_cast_for_gather = True
        args.force_prune_cast_ops = False

        optimizer = IROptimizations(args)
        optimized_graph = optimizer.optimize(ir_graph)

        backend = QnnConverterBackend(args)
        backend.save(optimized_graph)

        # To be removed in future releases. Show deprecated msg for arch_checker.
        # archLinter = ArchLinter(args)
        # archLinter.run_linter(optimized_graph, backend)
        if args.arch_checker:
            log_warning("WARNING: The usage of --arch_checker from the conversion tool will be deprecated. \n\
                Use the following command to run the architecture checker.\n\
                Command: qnn-architecture checker -i <path to json> -b <path to bin> -o <output location>\n\
                -i <required> <path>/model.json\n\
                -b <optional> <path>/model.bin\n\
                -o <optional> <output_path>\n\
                Please refer to the documentation for further details.\n")

    except Exception as e:
        log_error("Encountered Error: {}".format(str(e)))
        traceback.print_exc()
        sys.exit(1)


    sys.exit(0)

if __name__ == '__main__':
    main()
